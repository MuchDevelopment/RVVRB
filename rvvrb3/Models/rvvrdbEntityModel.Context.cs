//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace rvvrb3.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RVVRBDBEntities2 : DbContext
    {
        public RVVRBDBEntities2()
            : base("name=RVVRBDBEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tblFavoritePlaylist> tblFavoritePlaylists { get; set; }
        public virtual DbSet<tblFavoriteSong> tblFavoriteSongs { get; set; }
        public virtual DbSet<tblPath> tblPaths { get; set; }
        public virtual DbSet<tblPlaylist> tblPlaylists { get; set; }
        public virtual DbSet<tblPlaylistSong> tblPlaylistSongs { get; set; }
        public virtual DbSet<tblSong> tblSongs { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblFollow> tblFollows { get; set; }
    
        public virtual int addSongToPlaylist(Nullable<int> songID, Nullable<int> userID, Nullable<int> playlistID, Nullable<int> position)
        {
            var songIDParameter = songID.HasValue ?
                new ObjectParameter("songID", songID) :
                new ObjectParameter("songID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var playlistIDParameter = playlistID.HasValue ?
                new ObjectParameter("playlistID", playlistID) :
                new ObjectParameter("playlistID", typeof(int));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addSongToPlaylist", songIDParameter, userIDParameter, playlistIDParameter, positionParameter);
        }
    
        public virtual int createPlaylist(Nullable<int> userID, string playlistTitle)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var playlistTitleParameter = playlistTitle != null ?
                new ObjectParameter("playlistTitle", playlistTitle) :
                new ObjectParameter("playlistTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createPlaylist", userIDParameter, playlistTitleParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> createSong(Nullable<int> userID, string songname, Nullable<int> songtracknum, string songdescription, string songartist)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var songnameParameter = songname != null ?
                new ObjectParameter("songname", songname) :
                new ObjectParameter("songname", typeof(string));
    
            var songtracknumParameter = songtracknum.HasValue ?
                new ObjectParameter("songtracknum", songtracknum) :
                new ObjectParameter("songtracknum", typeof(int));
    
            var songdescriptionParameter = songdescription != null ?
                new ObjectParameter("songdescription", songdescription) :
                new ObjectParameter("songdescription", typeof(string));
    
            var songartistParameter = songartist != null ?
                new ObjectParameter("songartist", songartist) :
                new ObjectParameter("songartist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("createSong", userIDParameter, songnameParameter, songtracknumParameter, songdescriptionParameter, songartistParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> createUser(string userName, string bio, string imgfilename, Nullable<int> imgPathID, string email)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var bioParameter = bio != null ?
                new ObjectParameter("bio", bio) :
                new ObjectParameter("bio", typeof(string));
    
            var imgfilenameParameter = imgfilename != null ?
                new ObjectParameter("imgfilename", imgfilename) :
                new ObjectParameter("imgfilename", typeof(string));
    
            var imgPathIDParameter = imgPathID.HasValue ?
                new ObjectParameter("imgPathID", imgPathID) :
                new ObjectParameter("imgPathID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("createUser", userNameParameter, bioParameter, imgfilenameParameter, imgPathIDParameter, emailParameter);
        }
    
        public virtual int followUser(Nullable<int> idFollower, Nullable<int> idFollowed)
        {
            var idFollowerParameter = idFollower.HasValue ?
                new ObjectParameter("idFollower", idFollower) :
                new ObjectParameter("idFollower", typeof(int));
    
            var idFollowedParameter = idFollowed.HasValue ?
                new ObjectParameter("idFollowed", idFollowed) :
                new ObjectParameter("idFollowed", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("followUser", idFollowerParameter, idFollowedParameter);
        }
    
        public virtual ObjectResult<getAllSongsNotInPlaylists_Result> getAllSongsNotInPlaylists()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllSongsNotInPlaylists_Result>("getAllSongsNotInPlaylists");
        }
    
        public virtual ObjectResult<getFollowedUsers_Result> getFollowedUsers(Nullable<int> follower)
        {
            var followerParameter = follower.HasValue ?
                new ObjectParameter("follower", follower) :
                new ObjectParameter("follower", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getFollowedUsers_Result>("getFollowedUsers", followerParameter);
        }
    
        public virtual ObjectResult<string> getImgPath(string pathtitle, ObjectParameter path)
        {
            var pathtitleParameter = pathtitle != null ?
                new ObjectParameter("pathtitle", pathtitle) :
                new ObjectParameter("pathtitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getImgPath", pathtitleParameter, path);
        }
    
        public virtual ObjectResult<string> getPhoto(Nullable<int> id, ObjectParameter imgPath)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getPhoto", idParameter, imgPath);
        }
    
        public virtual ObjectResult<getSongByID_Result> getSongByID(Nullable<int> sid)
        {
            var sidParameter = sid.HasValue ?
                new ObjectParameter("sid", sid) :
                new ObjectParameter("sid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getSongByID_Result>("getSongByID", sidParameter);
        }
    
        public virtual ObjectResult<getSongLibrary_Result> getSongLibrary(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getSongLibrary_Result>("getSongLibrary", userIDParameter);
        }
    
        public virtual ObjectResult<getSongsInPlaylist_Result> getSongsInPlaylist(Nullable<int> playlistID)
        {
            var playlistIDParameter = playlistID.HasValue ?
                new ObjectParameter("playlistID", playlistID) :
                new ObjectParameter("playlistID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getSongsInPlaylist_Result>("getSongsInPlaylist", playlistIDParameter);
        }
    
        public virtual ObjectResult<getUserPlaylists_Result> getUserPlaylists(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUserPlaylists_Result>("getUserPlaylists", userIDParameter);
        }
    
        public virtual int RVVRBTEST(string input)
        {
            var inputParameter = input != null ?
                new ObjectParameter("input", input) :
                new ObjectParameter("input", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RVVRBTEST", inputParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int updatePhoto(string filename, Nullable<int> pathid, Nullable<int> id)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var pathidParameter = pathid.HasValue ?
                new ObjectParameter("pathid", pathid) :
                new ObjectParameter("pathid", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatePhoto", filenameParameter, pathidParameter, idParameter);
        }
    }
}
